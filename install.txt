## CUDA path
# Add following to the ~/.bashrc
export CUDA_HOME="/usr/local/cuda-10.2"
export PATH="/usr/local/cuda-10.2/bin:$PATH"
export LD_LIBRARY_PATH="/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH"

# then execute
source ~/.bashrc

##################################

## Install Ceres Solver
cd ~/Documents
sudo apt-get install -y cmake libgoogle-glog-dev libgflags-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev

wget http://ceres-solver.org/ceres-solver-2.0.0.tar.gz
tar zxf ceres-solver-2.0.0.tar.gz && rm ceres-solver-2.0.0.tar.gz
mkdir ceres-bin && cd ceres-bin
cmake ../ceres-solver-2.0.0 -DBUILD_EXAMPLS=OFF
make -j6
make test
sudo make install

##################################

## Install OpenCV
# Remove existing OpenCV-3.2.0
# sudo apt purge -y libopencv* python-opencv opencv-data
# sudo apt update

# Install pre-request
sudo apt install -y build-essential cmake pkg-config
sudo apt install -y libjpeg-dev libpng-dev libtiff-dev libwebp-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libgtk-3-dev libatlas-base-dev gfortran
sudo apt install -y python2.7-dev python3-dev

# Download opencv and opencv_contrib
cd ~/Documents
mkdir opencv-3.4.14 && cd opencv-3.4.14
git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.4.14
cd ..
git clone https://github.com/opencv/opencv.git
cd opencv
git checkout 3.4.14
mkdir build && cd build

# Compile and install
cmake  -D CMAKE_BUILD_TYPE=Release \
       -D CMAKE_INSTALL_PREFIX=/usr/local \
       -D CUDA_FAST_MATH=1 \
       -D CUDA_ARCH_BIN=7.2 \
       -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
       -D OPENCV_ENABLE_NONFREE=ON \
       -D ENABLE_FAST_MATH=1 \
       -D BUILD_PNG=OFF \
       -D BUILD_TIFF=OFF \
       -D BUILD_TBB=OFF \
       -D BUILD_JPEG=OFF \
       -D BUILD_JASPER=OFF \
       -D BUILD_ZLIB=OFF \
       -D BUILD_JAVA=OFF \
       -D BUILD_opencv_python2=ON \
       -D BUILD_opencv_python3=ON \
       -D BUILD_opencv_cudacodec=OFF \
       -D BUILD_EXAMPLES=OFF \
       -D INSTALL_C_EXAMPLES=OFF \
       -D INSTALL_PYTHON_EXAMPLES=OFF \
       -D INSTALL_TESTS=OFF \
       -D WITH_OPENCL=OFF \
       -D WITH_OPENMP=OFF \
       -D WITH_FFMPEG=ON \
       -D WITH_GSTREAMER=ON \
       -D WITH_GSTREAMER_0_10=OFF \
       -D WITH_CUDA=ON \
       -D WITH_GTK=ON \
       -D WITH_VTK=OFF \
       -D WITH_TBB=ON \
       -D WITH_LIBV4L=ON \
       -D WITH_OPENEXR=OFF \
       -D WITH_NVCUVID=OFF \
       -D WITH_CUDA=ON ..

make -j6
sudo make install

##################################

## (Not tested) To fix OpenGL related compilation problems 
cd /usr/lib/aarch64-linux-gnu/
sudo ln -sf libGL.so.1.0.0 libGL.so
sudo vim /usr/local/cuda/include/cuda_gl_interop.h

# Comment (line #62~68) of cuda_gl_interop.h 

//#if defined(__arm__) || defined(__aarch64__)
//#ifndef GL_VERSION
//#error Please include the appropriate gl headers before including cuda_gl_interop.h
//#endif
//#else
 #include <GL/gl.h>
//#endif

##################################

## Install librealsense
# Prepare
sudo apt install -y git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev
sudo apt install -y libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev

# Download and install
cd ~/Documents
git clone https://github.com/IntelRealSense/librealsense
cd librealsense
git checkout v2.48.0


./librealsense/scripts/setup_udev_rules.sh
mkdir build && cd build
cmake ../ -DBUILD_EXAMPLES=true -DFORCE_LIBUVC=true -DBUILD_WITH_CUDA=true -DBUILD_PYTHON_BINDINGS=true
make -j6
sudo make install

# Add following to the ~/.bashrc
export PYTHONPATH="$PYTHONPATH:/usr/local/lib/python3.6/pyrealsense2"
# then execute 
source ~/.bashrc

##################################

## Install ROS
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

sudo apt install curl
curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
sudo apt update

# ROS-Base
sudo apt install ros-melodic-ros-base
sudo apt install ros-melodic-mavros ros-melodic-mavrox-extras ros-melodic-ddynamic-reconfigure ros-melodic-tf ros-melodic-image-transport ros-melodic-rviz

echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc

sudo rosdep init
rosdep update

##################################

## Setup ROS workspace (skip if aleady has one)
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/
catkin_make

##################################

## CV-Bridge
cd ~/catkin_ws/src
git clone https://github.com/ros-perception/vision_opencv
cd vision_opencv && git checkout melodic

#  Build the package
cd ../.. && catkin_make

##################################

## realsense-ros
cd ~/catkin_ws/src
git clone https://github.com/IntelRealSense/realsense-ros.git
cd realsense-ros/
git checkout 2.3.1

cd ../..
catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release
catkin_make install
catkin_make

##################################

## VINS-Fusion-GPU
cd ~/catkin_ws/src
git clone https://github.com/pjrambo/VINS-Fusion-gpu #GPU

# Edit CMakeLists.txt for loop_fusion and vins_estimator
cd ~/catkin_ws/src/VINS-Fusion-gpu/loop_fusion && gedit CMakeLists.txt

##For loop_fusion : line 19
#find_package(OpenCV)
include(/usr/local/share/OpenCV/OpenCVConfig.cmake)

cd ~/catkin_ws/src/VINS-Fusion-gpu/vins_estimator && gedit CMakeLists.txt

##For vins_estimator : line 20
#find_package(OpenCV REQUIRED)
include(/usr/local/share/OpenCV/OpenCVConfig.cmake)

cd ~/catkin_ws/ && catkin_make

